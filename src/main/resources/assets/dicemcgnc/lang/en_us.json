{
	"item.moneybag.name":"Moneybag",
	"item.whitelister.name":"Whitelister",
	"item.wl_stick_green.name":"Green Whitelist Stick",
	"item.wl_stick_red.name":"Red Whitelist Stick",
	
	"gnc.money.events.login":"Account Balance $%s",
	
	"gnc.land.events.chunkevent.enter":"Now Entering: %s",
	"gnc.land.events.chunkevent.enter.unowned":"Unowned Territory",
	"gnc.land.events.chunkevent.enter.tempclaim":"Temporary Claim of: %s",
	"gnc.land.events.chunkevent.enter.guildclaim":"Territory of Guild: %s",
	
	"gnc.gui.land.ownername.owner":"Owner:",
	"gnc.gui.land.ownername.renter":"Renter:",
	"gnc.gui.land.ownername.unowned":"UNOWNED LAND",
	"gnc.gui.land.widget.close":"Close",
	"gnc.gui.land.widget.dropdown.info":"Detail",
	"gnc.gui.land.widget.dropdown.access":"Access",
	"gnc.gui.land.widget.dropdown.rent":"Rental",
	
	"lib.realestate.updatechunk.success":"Chunk data updated",
	"lib.realestate.updatechunk.failure.key":"Key Unrecognized",
	"lib.realestate.setwhitelist.success.set":"Whitelist set",
	"lib.realestate.setwhitelist.success.clear":"Whitelist cleared",
	"lib.realestate.updatewhitelist.success":"Whitelist entry set",
	"lib.realestate.removewhitelistitem.success":"Whitelist item removed",
	"lib.realestate.removewhitelistitem.failure.missing":"Item not found",
	"lib.realestate.addplayer.success":"Player added to claim",
	"lib.realestate.addplayer.failure":"Player already exists in list",
	"lib.realestate.subplayer.success":"Player Removed",
	"lib.realestate.subplayer.failure":"Player not found in list",
	"lib.realestate.tempclaim.success":"Land Temporarily Claimed",
	"lib.realestate.tempclaim.failure.occupied":"This land is already temporarily claimed",
	"lib.realestate.tempclaim.failure.funds":"Insufficient funds to temporarily claim",
	"lib.realestate.guildclaim.success":"Land Claimed for %s",
	"lib.realestate.guildclaim.failure.occupied":"This land is already owned",
	"lib.realestate.guildclaim.failure.funds":"Insufficient funds to claim land",
	"lib.realestate.guildclaim.failure.permission":"Player does not have permission to claim land",
	"lib.realestate.extendclaim.success":"Claim extended until %s",
	"lib.realestate.extendclaim.failure":"Insufficient funds to extend claim",
	"lib.realestate.updatesublet.success":"Sublet Information Updated",
	"lib.realestate.updatesublet.failure.permission":"Player not permitted to change sublet settings",
	"lib.realestate.updatesublet.failure.contracted":"Sublet settings may not be changed while being rented",
	"lib.realestate.disablesublet.failure.protected":"Sublet cannot be disabled due to current occupant grace period",
	"lib.realestate.expiresublet.success":"Rental Period ended for %s",
	"lib.realestate.rentsublet.success":"Area rented for $%s for %s hours",
	"lib.realestate.rentsublet.failure.funds":"Insufficient funds to rent area",
	"lib.realestate.rentsublet.failure.occupied":"Area already under lease",
	"lib.realestate.addsubletmembers.failure.permission":"Player not authorized to add players to claim",
	"lib.realestate.removesubletmembers.failure.permission":"Player not authorized to remove players from claim",
	"lib.realestate.setpublic.sucess":"Claim public access set to %s",
	"lib.realestate.setpublic.failure":"Player not authorized to change public accessibility",
	"lib.realestate.setexplode.sucess":"Claim explosion option set to %s",
	"lib.realestate.setexplode.failure":"Player not authorized to change explosion option",
	"lib.realestate.setminrank.sucess":"Claim minimum rank to access set to %s",
	"lib.realestate.setminrank.failure":"Player not authorized to change minimum access rank",
	"lib.realestate.setforsale.success":"Chunk %s set for sale for $%s",
	"lib.realestate.setforsale.failure.permission":"Player not authorized to sell claims",
	"lib.realestate.abandon.success":"Claim abandoned $%s refunded",
	"lib.realestate.abandon.failure.permission":"Player not authorized to abandon claims",
	
	"lib.guild.create.success":"Guild Created",
	"lib.guild.create.failure":"Guild Name Taken",
	"lib.guild.create.failure.funds":"Insufficient funds to create guild",
	"lib.guild.create.failure.inguild":"Player is already a member of a guild",
	"lib.guild.delete.success":"Guild Removed.",
	"lib.guild.delete.failure":"Guild could not be removed.",
	"lib.guild.member.add.success":"Player added to guild",
	"lib.guild.member.add.failure":"DB Error during player addition to guild",
	"lib.guild.member.invite.failure.permission":"Player not authorized to invite players to guild",
	"lib.guild.member.update.success":"%s guild rank set to %s",
	"lib.guild.member.update.failure":"%s rank update failed",
	"lib.guild.member.setrank.failure.permission":"Player not authorized to change member ranks",
	"lib.guild.member.remove.success":"%s removed from guild",
	"lib.guild.member.remove.failure":"Player not found in guild",
	"lib.guild.member.remove.failure.permission":"Player not authorized to kick members",
	"lib.guild.update.success":"Guild Data Updated.",
	"lib.guild.update.failure.notfound":"Guild update failed due to missing entry",
	"lib.guild.update.failure.sql":"Guild update failed due to SQL error",
	"lib.guild.update.failure.permission":"Players not authorized to make guild change",
	"lib.guild.update.failure.funds":"Insufficient Funds for Name Change",
	"lib.guild.rank.add.success":"Rank Added",
	"lib.guild.rank.add.failure.sql":"Error in DB entry of rank",
	"lib.guild.rank.add.failure.permission":"Player not authorized to buy ranks",
	"lib.guild.rank.add.failure.funds":"Insufficient funds to buy new rank",
	"lib.guild.rank.set.success":"Rank Title Updated.",
	"lib.guild.rank.set.failure":"Rank Not Unlocked.",
	"lib.guild.rank.set.failure.sql":"Rank update failed",
	"lib.guild.rank.set.failure.permission":"Player not authorized to change rank names",
	"lib.guild.permission.set.success":"Permission Set",
	"lib.guild.permission.set.failure.permission":"Player not authorized to change permission settings",
	"lib.guild.permission.set.failure":"Permission Already Defined",
	"lib.guild.permission.set.failure.sql":"Permission set failed in DB",
	"lib.guild.permission.set.failure.rank":"Rank has not been unlocked",
	"lib.guild.permission.set.failure.member":"non-members cannot be given permissions",
	"lib.guild.permission.remove.success":"Permission Removed",
	"lib.guild.permission.remove.failure":"Permission Did Not Previously Exist",
	"lib.guild.withdraw.success":"$%s transferred from guild to %s",
	"lib.guild.withdraw.failure":"Error in guild to player transfer",
	"lib.guild.withdraw.failure.permission":"Player not authorized to withdraw funds from guild account",
	"lib.guild.taxes":"Taxes have been applied",
	
	"lib.market.create.success":"Transaction Posted",
	"lib.market.create.failure.funds":"Insufficient Funds",
	"lib.market.create.failure.local":"Not a local Sale",
	"lib.market.create.failure.typemismatch":"Entry does not match Type",
	"lib.market.create.failure.sql":"Database Insertion Failed",
	"lib.market.placebid.success":"Bid Placed",
	"lib.market.placebid.failure.fund":"Insufficient Funds",
	"lib.market.placebid.failure.toolow":"Value does not exceed highest bid",
	"lib.market.placebid.failure.insert":"Bid Record Insertion Failed",
	"lib.market.storage.pull.success":"%s %s removed from storage.",
	"lib.market.storage.pull.failure.count":"The requested amount exceeds the stored quantity",
	"lib.market.storage.pull.failure.missing":"The item could not be found in storage",
	"lib.market.storage.pull.failure.entry":"Passed Entry contained invalid ID",
	"lib.market.storage.place.success":"Item added to storage",
	"lib.market.storage.place.failure.insert":"Storage Insertion Failed",
	"lib.market.supplychange.success":"Transaction Supply Modified",
	"lib.market.supplychange.failure.negative":"Requested reduction exceeds existing stock.",
	"lib.market.supplychange.failure.missing":"The item could not be found in market",
	"lib.market.supplychange.failure.fund":"Insufficient funds for market fees.",
	"lib.market.supplychange.failure.type":"Auction supplies cannot be changed",
	"lib.market.offer.success":"Offer submitted",
	"lib.market.offer.failure.type":"Invalid Entry Type passed",
	"lib.market.offer.failure.stock":"Transaction stock is less than requested amount",
	"lib.market.offer.failure.fund":"Insufficient funds to cover market fees",
	"lib.market.offer.failure.insert":"Offer Record Insertion Failed",
	"lib.market.acceptoffer.success":"Offer Accepted",
	"lib.market.acceptoffer.failure.type":"Invalid Market Type.",
	"lib.market.acceptoffer.failure.count":"Current sale quantity is lower than the requested amount.",
	"lib.market.acceptoffer.failure.missing":"Record Missing from Database",
	"lib.market.accetpoffer.failure.insert":"Unable to add historical record",
	"lib.market.executetrans.success":"Transaction Successful",
	"lib.market.executetrans.failure.type":"Invalid action for this market",
	"lib.market.executetrans.failure.fund":"Insufficient funds to complete transaction",
	"lib.market.executetrans.failure.count":"Transaction stock is less than the requested amount",
	"lib.market.executetrans.failure.missing":"Record missing in database",
	"lib.market.close.success":"Market Entry Closed.  Offers Refunded",
	"lib.market.close.failure.missing":"Market Entry Missing"
}